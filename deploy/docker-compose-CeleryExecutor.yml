version: '3.3'
services:
    rabbitmq:
        image: rabbitmq:3.6.12-management-alpine
        environment:
            - RABBITMQ_ERLANG_COOKIE=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
        deploy:
            placement:
                constraints: [ engine.labels.infrakit-role == manager ]

    postgres:
        image: postgres:9.6-alpine
        environment:
            - POSTGRES_USER=airflow
            - POSTGRES_PASSWORD=airflow
            - POSTGRES_DB=airflow
        #ports:
            #- "5432:5432"
        deploy:
            placement:
                constraints: [ engine.labels.infrakit-role == manager ]
        command: postgres -c max_connections=1000 -c shared_buffers=4096MB

    # single shot initialize the database
    init-db:
        image: wongwill86/air-tasks:branch-airflow-custom
        restart: on-failure
        depends_on:
            - postgres
            - rabbitmq
        environment:
            - LOAD_EX=y
            - FERNET_KEY=Z3jDcE-i0gRc7-A0ETMDUxd1MuL3Ye0tVcdDl5zmnec=
            - EXECUTOR=Celery
            - AIRFLOW_HOME=/usr/local/airflow
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY
            - AWS_DEFAULT_REGION
            # - POSTGRES_USER=airflow
            # - POSTGRES_PASSWORD=airflow
            # - POSTGRES_DB=airflow
        volumes:
            # Warning mounting dags/plugins not working for autoscaler
            #- ../dags/:/usr/local/airflow/dags
            #- ../plugins:/usr/local/airflow/plugins
            #- ../config/airflow.cfg:/usr/local/airflow/airflow.cfg
            - /var/run/docker.sock:/var/run/docker.sock
        #ports:
            #- "8080:8080"
        command: airflow initdb
        deploy:
            placement:
                constraints: [ engine.labels.infrakit-role == manager ]

    webserver:
        image: wongwill86/air-tasks:branch-airflow-custom
        restart: always
        depends_on:
            - postgres
            - rabbitmq
            - init-db
        environment:
            - LOAD_EX=y
            - FERNET_KEY=Z3jDcE-i0gRc7-A0ETMDUxd1MuL3Ye0tVcdDl5zmnec=
            - EXECUTOR=Celery
            - AIRFLOW_HOME=/usr/local/airflow
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY
            - AWS_DEFAULT_REGION
            # - POSTGRES_USER=airflow
            # - POSTGRES_PASSWORD=airflow
            # - POSTGRES_DB=airflow
        volumes:
            # Warning mounting dags/plugins not working for autoscaler
            #- ../dags/:/usr/local/airflow/dags
            #- ../plugins:/usr/local/airflow/plugins
            #- ../config/airflow.cfg:/usr/local/airflow/airflow.cfg
            - /var/run/docker.sock:/var/run/docker.sock
        #ports:
            #- "8080:8080"
        command: airflow webserver
        deploy:
            placement:
                constraints: [ engine.labels.infrakit-role == manager ]
            restart_policy:
                condition: any
                delay: 10m
                window: 120s

    flower:
        image: wongwill86/air-tasks:branch-airflow-custom
        restart: always
        depends_on:
            - rabbitmq
        environment:
            - EXECUTOR=Celery
        #ports:
            #- "5555:5555"
        command: airflow flower
        deploy:
            placement:
                constraints: [ engine.labels.infrakit-role == manager ]

    scheduler:
        image: wongwill86/air-tasks:branch-airflow-custom
        restart: always
        depends_on:
            - webserver
        volumes:
            # Warning mounting dags/plugins not working for autoscaler
            #- ../dags/:/usr/local/airflow/dags
            #- ../plugins:/usr/local/airflow/plugins
            #- ../config/airflow.cfg:/usr/local/airflow/airflow.cfg
            - /var/run/docker.sock:/var/run/docker.sock
        environment:
            - LOAD_EX=y
            - FERNET_KEY=Z3jDcE-i0gRc7-A0ETMDUxd1MuL3Ye0tVcdDl5zmnec=
            - EXECUTOR=Celery
            - AIRFLOW_HOME=/usr/local/airflow
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY
            - AWS_DEFAULT_REGION
            # - POSTGRES_USER=airflow
            # - POSTGRES_PASSWORD=airflow
            # - POSTGRES_DB=airflow
        command: airflow scheduler
        deploy:
            placement:
                constraints: [ engine.labels.infrakit-role == manager ]

    visualizer:
        image: dockersamples/visualizer:stable
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        #ports:
            #- "8080:8080"
        deploy:
            placement:
                constraints: [ engine.labels.infrakit-role == manager ]

    worker-worker:
        image: wongwill86/air-tasks:branch-airflow-custom
        restart: always
        depends_on:
            - scheduler
        volumes:
            # Warning mounting dags/plugins not working for autoscaler
            #- ../dags/:/usr/local/airflow/dags
            #- ../plugins:/usr/local/airflow/plugins
            #- ../config/airflow.cfg:/usr/local/airflow/airflow.cfg
            - /var/run/docker.sock:/var/run/docker.sock
            - /tmp:/tmp
        environment:
            - FERNET_KEY=Z3jDcE-i0gRc7-A0ETMDUxd1MuL3Ye0tVcdDl5zmnec=
            - EXECUTOR=Celery
            - AIRFLOW_HOME=/usr/local/airflow
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY
            - AWS_DEFAULT_REGION
        command: airflow worker -q worker
        deploy:
            mode: global
            placement:
                constraints: [ engine.labels.infrakit-role == worker ]

    worker-manager:
        image: wongwill86/air-tasks:branch-airflow-custom
        restart: always
        depends_on:
            - scheduler
        volumes:
            # Warning mounting dags/plugins not working for autoscaler
            #- ../dags/:/usr/local/airflow/dags
            #- ../plugins:/usr/local/airflow/plugins
            #- ../config/airflow.cfg:/usr/local/airflow/airflow.cfg
            - /var/run/docker.sock:/var/run/docker.sock
            - /tmp:/tmp
        environment:
            - FERNET_KEY=Z3jDcE-i0gRc7-A0ETMDUxd1MuL3Ye0tVcdDl5zmnec=
            - EXECUTOR=Celery
            - AIRFLOW_HOME=/usr/local/airflow
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY
            - AWS_DEFAULT_REGION
            # - POSTGRES_USER=airflow
            # - POSTGRES_PASSWORD=airflow
            # - POSTGRES_DB=airflow
            - INFRAKIT_IMAGE
            - INFRAKIT_GROUPS_URL
        command: airflow worker -q manager
        deploy:
            placement:
                constraints: [ engine.labels.infrakit-role == manager ]

    proxy:
        image: nginx:1.13.5-alpine
        ports:
            - "80:80"
            - "443:443"
        depends_on:
            - webserver
            - flower
            - visualizer
            - rabbitmq
        deploy:
            placement:
                constraints: [ engine.labels.infrakit-role == manager ]
        #volumes:
            #- ../secrets:/run/secrets/
        command:
            sh -c "apk update && apk add apache2-utils &&
            BASIC_AUTH_PASSWORD=$$(cat /run/secrets/basic_auth_password) &&
            [ -n \"$$BASIC_AUTH_PASSWORD\" ] &&
                   AUTH_BASIC_STRING=\\\"AirflowAuthorization\\\" &&
                   htpasswd -b -c /etc/nginx/.htpasswd $${BASIC_AUTH_USERNAME} $$(cat /run/secrets/basic_auth_username) ||
            AUTH_BASIC_STRING=off &&
            SSL_CERTIFICATE=$$(cat /run/secrets/ssl_certificate) &&
            [ -n \"$$SSL_CERTIFICATE\" ] &&
                   SSL_BLOCK=\"ssl_certificate \\/run\\/secrets\\/ssl_certificate;\\n
                    ssl_certificate_key \\/run\\/secrets\\/ssl_certificate_key;\\n
                    ssl_session_cache  builtin:1000  shared:SSL:10m;\\n
                    ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;\\n
                    ssl on;\" ||
            SSL_BLOCK=\"ssl off;\" && 
            echo $$SSL_BLOCK && 
            sed -i -e \"s/include \\/etc\\/nginx\\/conf\\.d\\/\\*\.conf;//\" 
            -e \"\\$$s/}/
                error_log \\/var\\/log\\/error.log;\\n
                gzip  on;\\n
                gzip_vary on;\\n
                gzip_min_length 10240;\\n
                gzip_proxied expired no-cache no-store private auth;\\n
                gzip_types text\\/plain text\\/css text\\/xml text\\/javascript application\\/x-javascript application\\/xml;\\n
                gzip_disable \\\"MSIE [1-6]\.\\\";\\n
                server {\\n
                    listen 80;\\n
                    listen 443;\\n
                    auth_basic $${AUTH_BASIC_STRING};\\n
                    auth_basic_user_file \\/etc\\/nginx\\/\.htpasswd;\\n
                    $${SSL_BLOCK}\\n
                    proxy_set_header Host \\$$host;\\n
                    proxy_set_header X-Real-IP \\$$remote_addr;\\n
                    proxy_set_header X-Forwarded-For \\$$proxy_add_x_forwarded_for;\\n
                    if (\\$$http_referer ~* \\\"\\/airflow\\/*.*\\\") {\\n
                        set \\$$is_airflow \\\"A\\\";\\n
                    }\\n
                    if (\\$$request_uri !~* ^\\/airflow\\/.*) {\\n
                        set \\$$is_airflow \\\"\\$${is_airflow}B\\\";\\n
                    }\\n
                    if (\\$$is_airflow ~* AB) { \\n
                        rewrite ^\\/*(.*) \\/airflow\\/\\$$1 permanent;\\n
                    }\\n
                    if (\\$$http_referer ~* \\\".*\\/flower\\/*.*\\\") {\\n
                        set \\$$is_flower \\\"A\\\";\\n
                    }\\n
                    if (\\$$request_uri !~* ^\\/flower\\/.*) {\\n
                        set \\$$is_flower \\\"\\$${is_flower}B\\\";\\n
                    }\\n
                    if (\\$$is_flower = AB) { \\n
                        rewrite ^\\/*(.*) \\/flower\\/\\$$1 permanent;\\n
                    }\\n
                    if (\\$$http_referer ~* \\\".*\\/visualizer\\/*.*\\\") {\\n
                        set \\$$is_visualizer \\\"A\\\";\\n
                    }\\n
                    if (\\$$request_uri !~* ^\\/visualizer\\/.*) {\\n
                        set \\$$is_visualizer \\\"\\$${is_visualizer}B\\\";\\n
                    }\\n
                    if (\\$$is_visualizer = AB) { \\n
                        rewrite ^\\/*(.*) \\/visualizer\\/\\$$1 permanent;\\n
                    }\\n
                    if (\\$$http_referer ~* \\\".*\\/rabbitmq\\/*.*\\\") {\\n
                        set \\$$is_rabbitmq \\\"A\\\";\\n
                    }\\n
                    if (\\$$request_uri !~* ^\\/rabbitmq\\/.*) {\\n
                        set \\$$is_rabbitmq \\\"\\$${is_rabbitmq}B\\\";\\n
                    }\\n
                    if (\\$$is_rabbitmq = AB) { \\n
                        rewrite ^\\/*(.*) \\/rabbitmq\\/\\$$1 permanent;\\n
                    }\\n
                    location \\/ {\\n
                        rewrite . \\/airflow\\/admin\\/ permanent;\\n
                    }\\n
                    location ^~ \\/airflow\\/ {\\n
                        proxy_redirect http:\\/\\/\\$$host \\$$scheme:\\/\\/\\$$host;\\n
                        proxy_pass http:\\/\\/webserver:8080\\/;\\n
                    }\\n
                    location ^~ \\/flower\\/ {\\n
                        sub_filter_last_modified on;\\n
                        sub_filter_once off;\\n
                        sub_filter_types application\\/javascript;\\n
                        sub_filter \\\"url_prefix() +\\\" \\\"'\\/flower' +\\\";\\n
                        proxy_redirect http:\\/\\/\\$$host \\$$scheme:\\/\\/\\$$host;\\n
                        proxy_pass http:\\/\\/flower:5555\\/;\\n
                    }\\n
                    location ^~ \\/visualizer\\/ {\\n
                        proxy_redirect http:\\/\\/\\$$host \\$$scheme:\\/\\/\\$$host;\\n
                        proxy_pass http:\\/\\/visualizer:8080\\/;\\n
                    }\\n
                    location ^~ \\/rabbitmq\\/ {\\n
                        proxy_pass http:\\/\\/rabbitmq:15672\\/;\\n
                        proxy_redirect off;\\n
                    }\\n
                }\\n
            }/\" /etc/nginx/nginx.conf &&
            unset BASIC_AUTH_PASSWORD &&
            unset BASIC_AUTH_USERNAME &&
            unset SSL_CERTIFICATE &&
            nginx-debug -g \"daemon off;\" 2>&1"
        secrets:
            - basic_auth_username
            - basic_auth_password
            - ssl_certificate
            - ssl_certificate_key

    add-secrets:
        image: wongwill86/air-tasks:branch-airflow-custom
        depends_on:
            - scheduler
        environment:
            - FERNET_KEY=Z3jDcE-i0gRc7-A0ETMDUxd1MuL3Ye0tVcdDl5zmnec=
            - EXECUTOR=Celery
            - AIRFLOW_HOME=/usr/local/airflow
        entrypoint: python /secrets_to_airflow_variables.py
        deploy:
            restart_policy:
                condition: on-failure
            placement:
                constraints: [ engine.labels.infrakit-role == manager ]
        #secrets:
            #- basic_auth_username
            #- basic_auth_password

secrets:
    basic_auth_username:
        external: true
    basic_auth_password:
        external: true
    ssl_certificate:
        external: true
    ssl_certificate_key:
        external: true

networks:
    default:
        attachable: true
        ipam:
            driver: default
            config:
                - subnet: 10.0.0.0/16
